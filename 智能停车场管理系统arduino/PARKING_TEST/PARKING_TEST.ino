
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);
 
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2
#define LedPin 13 
#define Trig 7 //引脚Tring 连接 IO D4  
#define Echo 8 //引脚Echo 连接 IO D5   
#define LOGO16_GLCD_HEIGHT 16                                                 
#define LOGO16_GLCD_WIDTH  16 
 
#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif
//const int LedPin = 13;
int ledState = 0;
int totalcarnum = 18;
int totalcarA = 9;
int totalcarB = 9;
int a=0,c=0;
float cm; //距离变量  
float temp; //
int commaPosition;

static const uint8_t PROGMEM one_16x8[] = {0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00};/*"1",0*/
static const uint8_t PROGMEM two_16x8[] = {0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00};/*"2",1*/
static const uint8_t PROGMEM three_16x8[] = {0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00};/*"3",2*/
static const uint8_t PROGMEM four_16x8[] = {0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24,0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00};/*"4",3*/
static const uint8_t PROGMEM five_16x8[] = {0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78,0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00};/*"5",4*/
static const uint8_t PROGMEM six_16x8[] = {0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00};/*"6",5*/
static const uint8_t PROGMEM seven_16x8[] = {0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00};/*"7",6*/
static const uint8_t PROGMEM eight_16x8[] = {0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00};/*"8",7*/
static const uint8_t PROGMEM nine_16x8[] = {0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00};/*"9",8*/
static const uint8_t PROGMEM zero_16x8[] = {0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00};/*"0",9*/
static const uint8_t PROGMEM A_16x8[] = {0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28,0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00};/*"A",A*/
static const uint8_t PROGMEM B_16x8[] = {0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00};/*"B",B*/
static const uint8_t PROGMEM maohao_16x8[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00};/*":",:*/
//起始
static const uint8_t PROGMEM First_16x16[] = {
0x10,0x80,0x10,0x40,0x17,0xFC,0x20,0x00,0x23,0xF8,0x62,0x08,0x63,0xF8,0xA0,0x00,
0x2F,0xFE,0x28,0x02,0x23,0xF8,0x20,0x40,0x20,0x40,0x20,0x40,0x21,0x40,0x20,0x80,/*"停",0*/

0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xFC,0x04,0x00,0x09,0x00,0x11,0x00,0x21,0x00,
0x3F,0xF8,0x01,0x00,0x01,0x00,0xFF,0xFE,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,/*"车",1*/

0x20,0x00,0x23,0xF0,0x20,0x20,0x20,0x40,0x20,0x80,0xF9,0x00,0x23,0xFC,0x21,0x24,
0x21,0x24,0x21,0x24,0x22,0x24,0x3A,0x44,0xE4,0x44,0x48,0x84,0x01,0x28,0x02,0x10,/*"场",2*/

0x07,0x02,0x78,0x02,0x08,0x02,0xFF,0x82,0x2A,0x12,0x2A,0x92,0xEB,0x12,0x2A,0x92,
0x6A,0x92,0xA9,0x92,0x1C,0x12,0x2A,0x12,0x49,0x02,0x88,0x82,0x08,0x0A,0x08,0x04,/*"剩",3*/

0x01,0x00,0x01,0x00,0x02,0x80,0x04,0x40,0x08,0x20,0x10,0x10,0x2F,0xE8,0xC1,0x06,
0x01,0x00,0x3F,0xF8,0x01,0x00,0x11,0x10,0x11,0x08,0x21,0x04,0x45,0x04,0x02,0x00/*"余",4*/

};
static const uint8_t PROGMEM show_16x16[] = {
0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,/*"<",0*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",1*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",2*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",3*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",4*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",5*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",6*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",7*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",8*/
0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00/*">",9*/
};
static const uint8_t PROGMEM End_16x16[] = {
0x01,0x00,0x01,0x00,0x02,0x80,0x04,0x40,0x08,0x20,0x10,0x10,0x21,0x08,0xC1,0x06,
0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,/*"个",7*/

0x02,0x00,0x02,0x00,0x02,0x00,0x7F,0xFC,0x04,0x00,0x09,0x00,0x11,0x00,0x21,0x00,
0x3F,0xF8,0x01,0x00,0x01,0x00,0xFF,0xFE,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,/*"车",8*/

0x08,0x80,0x08,0x40,0x08,0x40,0x10,0x00,0x17,0xFC,0x30,0x00,0x30,0x08,0x52,0x08,
0x92,0x08,0x11,0x10,0x11,0x10,0x11,0x10,0x11,0x20,0x10,0x20,0x1F,0xFE,0x10,0x00/*"位",9*/
};

void setup()
{ 
  pinMode(LedPin, OUTPUT);
  Serial.begin(9600); 
  pinMode(Trig, OUTPUT);  
  pinMode(Echo, INPUT);  
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)  
}

void cut(String message)
{
  commaPosition = message.indexOf('|');
  totalcarnum=message.substring(0,commaPosition).toInt();
  message = message.substring(commaPosition+1, message.length());
  commaPosition = message.indexOf('|');
  totalcarA=message.substring(0,commaPosition).toInt();
  message = message.substring(commaPosition+1, message.length());
  totalcarB = message.toInt();
}
void choose(int d,int b,int num)
{
  a=(int)num/10;
  c=num%10;
  switch(a){
    case 1: display.drawBitmap(d,16,one_16x8,8,16,WHITE);break;
    case 0: display.drawBitmap(d,16,zero_16x8,8,16,WHITE);break;
    default:break;
  }
  switch(c){
    case 1: display.drawBitmap(b,16,one_16x8,8,16,WHITE);break;
    case 2: display.drawBitmap(b,16,two_16x8,8,16,WHITE);break;
    case 3: display.drawBitmap(b,16,three_16x8,8,16,WHITE);break;
    case 4: display.drawBitmap(b,16,four_16x8,8,16,WHITE);break;
    case 5: display.drawBitmap(b,16,five_16x8,8,16,WHITE);break;
    case 6: display.drawBitmap(b,16,six_16x8,8,16,WHITE);break;
    case 7: display.drawBitmap(b,16,seven_16x8,8,16,WHITE);break;
    case 8: display.drawBitmap(b,16,eight_16x8,8,16,WHITE);break;
    case 9: display.drawBitmap(b,16,nine_16x8,8,16,WHITE);break;
    case 0: display.drawBitmap(b,16,zero_16x8,8,16,WHITE);break;
    default:break;
  }
}
void carin() {  
  //给Trig发送一个低高低的短时间脉冲,触发测距  
  digitalWrite(Trig, LOW); //给Trig发送一个低电平  
  delayMicroseconds(2);    //等待 2微妙  
  digitalWrite(Trig,HIGH); //给Trig发送一个高电平  
  delayMicroseconds(10);    //等待 10微妙  
  digitalWrite(Trig, LOW); //给Trig发送一个低电平  
  temp = float(pulseIn(Echo, HIGH)); //存储回波等待时间,  
  cm = (temp * 17 )/1000; //把回波时间换算成cm  
  
  if(cm<5.0)
  {
    Serial.print('1');
  }   
}
void test_SSD1306(void){
  display.clearDisplay();
  display.ShowCN_16(0,0, First_16x16,sizeof(First_16x16)/32,WHITE);
  display.ShowCN_16(16,16,End_16x16,sizeof(End_16x16)/32,WHITE);
  choose(0,8,totalcarnum);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.ShowEN_8(0,0, show_16x16,sizeof(show_16x16)/16,WHITE);
  display.drawBitmap(0,16,A_16x8,8,16,WHITE);
  display.drawBitmap(8,16,maohao_16x8,8,16,WHITE);
  choose(16,24,totalcarA);
  display.drawBitmap(48,16,B_16x8,8,16,WHITE);
  display.drawBitmap(56,16,maohao_16x8,8,16,WHITE);
  choose(64,72,totalcarB);
  display.display();
  delay(2000);
}

void loop()
{ 
    String receiveVal="";
    test_SSD1306();
    carin();
    while (Serial.available() > 0)  
    {
        receiveVal += char(Serial.read());
        delay(2);
    }
    if (receiveVal.length() > 0)
    {
       if(receiveVal == "1")    
          ledState = 1;   
       else if(receiveVal =="0")
          ledState = 0; 
       else 
       { 
         cut(receiveVal);
         test_SSD1306();
       }
    }
    digitalWrite(LedPin, ledState); 
    delay(50);        
} 
